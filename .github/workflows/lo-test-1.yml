name: build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device:
        description: 'select device to build'
        default: 'r4s'
        required: false
      branch:
        description: 'seleclt openwrt branch'
        default: 'master'
        required: false

jobs:

  build_packages:
    name: Build ${{ github.event.client_payload.device || github.event.inputs.device }} packages
    runs-on: ubuntu-latest
    env:
      DEVICE: ${{ github.event.client_payload.device || github.event.inputs.device }}
      BRANCH: ${{ github.event.client_payload.branch || github.event.inputs.branch }}

    steps:

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          nohup sh -c '
          sudo sysctl vm.swappiness=0
          sudo apt update;
          sudo apt -qq -y --no-install-recommends install pv jq \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
          g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \
          libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs \
          nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
          python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
          texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          ' &
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /opt/hostedtoolcache

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Checkout
        run: |
          cd
          curl -sL https://raw.githubusercontent.com/stupidloud/nanopi-openwrt/zstd-bin/zstd | sudo tee /usr/bin/zstd > /dev/null
          for i in {1..20}
          do
            curl -sL --fail https://github.com/stupidloud/sshactions/releases/download/cache/lede.$DEVICE.img.zst.0$i || break
          done | zstdmt -d -o lede.img || (truncate -s 30g lede.img && mkfs.btrfs -M lede.img)
          LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
          sudo losetup -P --direct-io $LOOP_DEVICE lede.img
          mkdir lede && sudo mount -o nossd,compress=zstd $LOOP_DEVICE lede
          if [ -d 'lede/.git' ]; then
          cd lede && rm -f zerospace && git config --local user.email "action@github.com" && git config --local user.name "GitHub Action"
          git fetch && git reset --hard origin/$BRANCH && git clean -df
          else
          sudo chown $USER:$(id -gn) lede && git clone -b $BRANCH --single-branch https://github.com/coolsnowwolf/lede lede
          fi

      - name: Update feeds and packages
        if: false
        run: |
          cd ~/lede
          rm -rf ./tmp && rm -rf ./feeds && rm -rf ./pacakges/feeds
          if [ -d 'feeds' ]; then
            pushd feeds/packages; git restore .; popd
            pushd feeds/luci; git restore .; popd
            pushd feeds/routing; git restore .; popd
            pushd feeds/telephony; git restore .; popd
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          . $GITHUB_WORKSPACE/scripts/merge_packages.sh
          . $GITHUB_WORKSPACE/scripts/patches.sh
          cd
          svn export https://github.com/openwrt/luci/branches/master luci
          pushd luci
          ls -d */ | xargs -ri diff -q {} ../lede/feeds/luci/{} | grep Only | grep lede | grep -E applications\|themes | awk '{print $4}' | xargs -ri echo CONFIG_PACKAGE_{}=m > ~/lede/more_luci.txt
          popd

      - name: Custom configure file
        if: false
        run: |
          cd ~/lede && rm -rf tmp/
          cat $GITHUB_WORKSPACE/$DEVICE.config.seed $GITHUB_WORKSPACE/common.seed | sed 's/\(CONFIG_PACKAGE_luci-app-[^A-Z]*=\)y/\1m/' > .config
          find package/ -type d -name luci-app-* | rev | cut -d'/' -f1 | rev | xargs -ri echo CONFIG_PACKAGE_{}=m >> .config
          cat $GITHUB_WORKSPACE/extra_packages.seed >> .config
          cat more_luci.txt >> .config
          make defconfig && sed -i -E 's/# (CONFIG_.*_COMPRESS_UPX) is not set/\1=y/' .config && make defconfig
          cat .config

      - name: Clean build cache
        if: ${{ github.event.client_payload.package_clean == 'true' || github.event.inputs.device != '' }}
        run: |
          cd ~/lede
          df -h .
          make clean || true
          df -h .
      - name: Build and deploy packages
        timeout-minutes: 1440
        if: false
        run: |
          ulimit -SHn 65000
          cd ~/lede
          while true; do make download -j && break || true; done
          make -j$[`nproc`+1] IGNORE_ERRORS=1 tools/compile toolchain/compile buildinfo target/compile package/compile package/install target/install
          if [ ! -e ~/lede/bin/targets/*/*/*imagebuilder*xz ]; then make IGNORE_ERRORS=1 V=sc; fi
          mv `ls ~/lede/bin/targets/*/*/*imagebuilder*xz` ~/ib-$DEVICE.tar.xz

          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      - name: Prepare artifact
        if: false
        run: |
          cd
          mkdir -p ./artifact/buildinfo
          cd lede
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
          cp -rf .config ../artifact/buildinfo/
          echo "strDate=$(TZ=UTC-8 date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV
          cd ..
          mv artifact $GITHUB_WORKSPACE
      - name: Clean build cache
        if: ${{ github.event.client_payload.package_clean == 'true' }}
        run: |
          cd ~/lede
          df -h .
          make clean
          rm -rf bin tmp
          df -h .

      - name: Deliver buildinfo
        if: false
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Save cache state
        run: |
          cd
          sleep 60
          sudo mount -o remount,compress=no,nodatacow,nodatasum lede
          cd lede/; pv /dev/zero > zerospace || true; sync; rm -f zerospace; cd -
          sleep 60
          sudo umount lede
          sudo losetup -d $LOOP_DEVICE
          export AUTH="Authorization: token ${{ secrets.SEC_TOKEN }}"
          export cache_path='github.com/repos/anthqiu/sshactions/releases'
          export cache_release_id='121619795'
          #zstdmt -c --adapt --long lede.img | parallel --wc --block 1.99G --pipe \
          #'curl -s --data-binary @- -H "$AUTH" -H "Content-Type: application/octet-stream" https://uploads.$cache_path/$cache_release_id/assets?name=lede.'$DEVICE'.img.zst.0{#} > /dev/null'
          zstdmt -c --long lede.img | split --numeric=1 -b 2000m - lede.$DEVICE.img.zst.
          #for f in *img.zst*
          #do
          #  while true; do curl --data-binary @$f -H "$AUTH" -H 'Content-Type: application/octet-stream' "https://uploads.$cache_path/$cache_release_id/assets?name=$f" && break || true; done
          #done
          while true; do
          ret=$(curl -sH "$AUTH" "https://api.$cache_path/tags/cache")
          echo $ret | jq -r '.assets[] | select(.name | contains ("'$DEVICE'.img")).id' | \
          xargs -ri curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
          echo $ret | jq -r '.assets[] | select(.name == "ib-'$DEVICE'.tar.xz").id' | \
          xargs -ri curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
          ls *img.zst* ib-$DEVICE.tar.xz | parallel --wc 'while true; do curl -T {} -H "$AUTH" -H "Content-Type: application/octet-stream" "https://uploads.$cache_path/$cache_release_id/assets?name={}" && break || true; done'
          set +e
          for i in {1..20}; do curl -sL --fail https://github.com/anthqiu/sshactions/releases/download/cache/lede.$DEVICE.img.zst.0$i || break; done | zstdmt -d -o /dev/null
          if [ $? -eq 0 ]; then break; fi
          done
          set -e
